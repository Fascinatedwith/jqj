(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-41c39b74"],{"1a3d":function(n,e,t){"use strict";t("6fc1")},"6fc1":function(n,e,t){},"87ef":function(n,e,t){"use strict";t.r(e);var i=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content",class:{contentTheme:n.theme}},[t("div",{staticClass:"synopsis"},[n._v("简介")]),t("div",{staticClass:"synopsisBox"},[n._v(" jquery的基本使用 ")]),t("div",{staticClass:"br"}),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("1. jQuery 对象和 DOM 对象转换")]),n._m(0),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("2. jQuery选择器")]),n._m(1),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("3. 隐式迭代（添加css）")]),n._m(2),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("4. 类名操作")]),n._m(3),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("5. 动画效果")]),n._m(4),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("6. 属性操作")]),n._m(5),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("7. 内容操作")]),n._m(6),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("8. 遍历方法")]),n._m(7),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("9. 元素操作")]),n._m(8),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("10. 尺寸操作")]),n._m(9),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("11. 位置操作")]),n._m(10),t("h3",{staticStyle:{margin:"20px 0"}},[n._v("12. 事件操作")]),n._m(11)])},s=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      /* 用$直接获取的就是jQuery 对象  */\n      $('video')[0]       *jQuery 对象转换成DOM 对象\n\n      $('video').get(0)       *jQuery 对象转换成DOM 对象\n    ")]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      /* 基础选择器  */\n      $('#id')        获取指定id的元素\n      $('*')            获取所有\n      $('.class')      获取class类名的元素\n      $('div')           获取所有div\n      $('div,p,li')       选取多个元素\n      $('li.current')       交集元素\n\n      /* 层级选择器  */\n      $('ul>li')      获取亲儿子层级的元素\n      $('ul li')      获取 后代所有的li   包括孙子\n      $(\"ul[属性='属性值']\")   根据孩子属性获取\n\n      /* 筛选选择器  */\n      $(\"ul li:first\")         获取第一个li\n      $(\"ul li:last\")          获取最后一个\n      $(\"ul li:eq(索引号)\")         获取索引号的那个li\n      $(\"ul li:odd\")          获取索引号为奇数的li\n      $(\"ul li:even\")         获取索引号为偶数的li\n\n      /* 层级筛选  */\n      $(\"li\").parent()        查找父级\n      $(\"li\").parents('名字')        查找父及以上 祖先级  需要写要找的元素名\n      $('ul').children('li')       查找最近一级的儿子     相当于子代选择器\n      $('li').find('div')       查找所有div后代    相当于后代选择器\n      $(\"ul .item\").siblings(\"li\")      查找除了自身元素之外的所有亲兄弟\n      $('li').eq(2)       查找索引号为的那个li\n      $(\".类名\").nextAll( )         查找当前元素之后的所有同辈\n      $(\".类名\").prevAll( )        查找当前元素之前的所有同辈\n      $(\"div\").hasClass(\"current\")      检查这个元素有没有 这个类名，有则返回true\n    ")]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      /* *隐式迭代就是把匹配的所有元素都添加这个css样式 可写多个样式用，分隔 */\n      $("div").css("background": "pink");\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      $(this).index()     获取索引号\n      $("div").addClass("current");      添加类名\n      $("div").removeClass("current");      删除类名\n      $("div").toggleClass("current");      切换类名\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      $('div').hide()      隐藏\n      $('div').show()     显示\n      $('video')[0].play()     自动播放\n      $('div').toggle()    切换\n      $('div').fadeIn(1000)    淡入\n      $('div').fadeOut(1000)    淡出\n      $('div').fadeToggle(1000)    淡入淡出切换\n      $('div').fadeTo(1000, 0.5)    修改透明度   //  fadeTo() 这个速度和透明度要必须写\n\n      /* 自定义动画 .animate({ }) */\n      $(function() {\n        $(\"button\").click(function() {\n          $(\"div\").animate({\n            left: 500,\n            opacity: .5,\n            width: 500,\n          }, 10000);\n        })\n      })\n\n      /* 停止动画排队 .stop( ) */\n      $(\".nav>li\").hover(function() {\n          // stop 方法必须写到动画的前面\n          $(this).children(\"ul\").stop().slideToggle();\n      });\n    ")]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      /* 获取固有属性 */\n      $(\"a\").prop('属性名')          获取属性值\n      $(\"a\").prop('属性名','属性值')        更改属性值\n\n      /* 获取自定义属性 */\n      $(\"div\").attr('属性名')            获取属性值\n      $(\"div\").attr('属性名','属性值')            更改属性值\n\n      /* 数据缓存 */\n      $(\"span\").data('属性名','属性值')         附加数据\n      $(\"span\").data('属性名')          获取数据\n      $(\"div\").data(\"index\")     //这个方法获取data-index h5自定义属性 不用写data- 而且返回的是数字型\n\n    ")]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      /* 获取元素内容 */\n      $("div").html()      //  对应JS中的 innerHTML\n\n      /* 设置元素内容 */\n      $("div").html(\'内容\')\n\n      /* 获取元素文本内容 */\n      $("div").text()      // 对应JS中的 innerText\n\n       /* 设置元素文本内容 */\n      $("div").text(\'内容\')\n\n      $("div").val()   对应JS中的  value\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      /* 遍历  .each() */\n      $.each(arr, function(i, ele) {    // 遍历数组\n        console.log(i); // 索引\n        console.log(ele);  // 值\n      })\n\n      $.each({    // 遍历对象\n        name: "andy",\n        age: 18\n      }, function(i, ele) {\n        console.log(i); // 输出的是 name age 属性名\n        console.log(ele); // 输出的是 andy  18 属性值\n      })\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      /* 创建元素 */\n      var li = $("< li>我是后来创建的li < /li>");\n      var div = $("< div>我是外部的< /div>");\n\n      /* 添加元素 - 内部添加 */\n      $("ul").append(li);  // 内部添加并且放到内容的最后面\n      $("ul").prepend(li); // 内部添加并且放到内容的最前面\n\n      /* 添加元素 - 外部添加 */\n      $(".test").after(div);    // 外部添加放到目标的后面\n      $(".test").before(div);   // 外部添加放到目标的前面\n\n      /* 删除元素 */\n      $("ul").remove();   //可以删除匹配的元素 自杀\n      $("ul").empty();    // 可以删除匹配的元素里面的子节点 孩子\n      $("ul").html("");   // 可以删除元素里面的所有\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v('\n      /* 获取设置元素 width和height大小 */\n      $("div").width()\n      $("div").height()\n\n      /* 获取设置元素 width和height + padding大小 */\n      $("div").innerWidth()\n      $("div").innerHeight()\n\n      /* 获取设置元素 width和height + padding + border大小 */\n      $("div").outerWidth()\n      $("div").outerHeight()\n    ')]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      /* 返回相对于文档的距离 .offset() */\n      console.log($('.son').offset());  // 返回一个对象 距离文档页面的距离\n      console.log($('.son').offset().top);  // 返回距离文档的距离\n      $('.son').offset({  // 可以更改距离\n        top:500,\n        left:500\n      })\n\n      /* 返回相对于有定位的父元素的距离 .position() */\n      console.log($('.son').position())\n      // 如果找不到有定位的父元素 则相对于文档， *不可更改\n\n      /* 页面被卷去的顶部距离 .scrollTop()  */\n      $(document).scrollTop()\n\n      /* 页面被卷去的左侧距离 .scrollLeft()  */\n      $(document).scrollLeft()\n    ")]),n._v("\n  ")])},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n      /* on 绑定多个事件 */\n      $('div').on({\n        click: function () {\n          $(this).css('background', 'orange')\n        },\n        mouseenter: function () {\n          $(this).css('background', 'purple')\n        },\n        mouseleave: function () {\n          $(this).css('background', 'blue')\n        }\n      })\n\n      /* one 绑定事件  * 只触发一次 */\n      $(\"p\").one(\"click\", function() {\n        alert(11);\n      })\n\n      /* on 事件委托  给未来动态元素绑定事件 */\n      //click 是绑定在ol 身上的，但是 触发的对象是 ol 里面的小li\n      $('ol').on('click', 'li', function () {\n        console.log(22);\n      })\n\n      /* 事件解绑 */\n      $('div').off( )      *解绑全部事件\n      $('div').off('click')       *只解绑点击事件\n      $('ul').off('click','li')      *解绑事件委托\n\n      /* 触发元素事件 */\n      $(\"div\").click(); // 会触发元素的默认行为\n      $(\"div\").trigger(\"click\"); // 会触发元素的默认行为\n      $(\"a\").triggerHandler(\"click\");  // 就是不会触发元素的默认行为\n\n      /* 事件对象 e */\n      e.stopPropagation()      // 阻止冒泡\n      e.preventDefault()        // 阻止默认行为\n    ")]),n._v("\n  ")])}],c=t("5530"),l=t("2f62"),a={components:{},data:function(){return{}},computed:Object(c["a"])({},Object(l["b"])(["theme"])),created:function(){},mounted:function(){},methods:{}},o=a,r=(t("1a3d"),t("2877")),d=Object(r["a"])(o,i,s,!1,null,"3cafdb82",null);e["default"]=d.exports}}]);