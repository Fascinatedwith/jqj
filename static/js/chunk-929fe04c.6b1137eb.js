(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-929fe04c"],{"790f":function(t,n,e){},baf0:function(t,n,e){"use strict";e("790f")},bf93:function(t,n,e){"use strict";e.r(n);var i=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content",class:{contentTheme:t.theme}},[e("div",{staticClass:"synopsis"},[t._v("简介")]),e("div",{staticClass:"synopsisBox"},[t._v(" 将列表型的数据转化成树形数据 => 递归算法 => 自身调用自身 => 一定条件不能一样， 否则就会死循环 ")]),e("div",{staticClass:"br"}),t._m(0)])},s=[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("pre",{staticClass:"pre"},[t._v("    "),e("code",{staticClass:"code"},[t._v("\n    // 递归函数\n    // list 接收总数据  pid 接收父级id\n    tranListToTreeData(list, pid) {\n      var arr = []\n      list.forEach(item => {\n        if (item.pid === pid) {\n          // 找到之后 就要去找 item 下面有没有子节点\n          // children 用于存放子节点的\n          const children = tranListToTreeData(list, item.id)\n          if (children.length) {\n            // 如果children的长度大于0 说明找到了子节点\n            item.children = children\n          }\n          arr.push(item) // 将内容加入到数组中\n        }\n      })\n      return arr\n    }\n    // 使用方法\n    tranListToTreeData(list, 0)\n    ")]),t._v("\n  ")])}],c=e("5530"),a=e("2f62"),r={components:{},data:function(){return{}},computed:Object(c["a"])({},Object(a["b"])(["theme"])),created:function(){},mounted:function(){},methods:{}},o=r,l=(e("baf0"),e("2877")),d=Object(l["a"])(o,i,s,!1,null,"e9122622",null);n["default"]=d.exports}}]);