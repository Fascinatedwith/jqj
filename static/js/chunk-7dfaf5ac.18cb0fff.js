(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-7dfaf5ac"],{"10c9":function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"content",class:{contentTheme:n.theme}},[t("div",{staticClass:"synopsis"},[n._v("简介")]),t("div",{staticClass:"synopsisBox"},[n._v(" 深拷贝（Deep Copy）是指创建一个新的对象，并递归地复制原始对象中的所有层级的属性（包括子对象）到新对象中。新对象和原始对象在内存中是完全独立的，对其中一个对象的修改不会影响到原始对象。 ")]),t("div",{staticClass:"br"}),n._m(0)])},c=[function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("pre",{staticClass:"pre"},[n._v("    "),t("code",{staticClass:"code"},[n._v("\n    // 递归函数\n    function deepCopy(newobj, oldobj){\n      for (var k in oldobj) {\n        // 判断我们的属性值属于那种数据类型\n        // 1. 获取属性值  oldobj[k]\n        var item = oldobj[k];\n        // 2. 判断这个值是否是数组\n        if (item instanceof Array) {\n          newobj[k] = [];\n          deepCopy(newobj[k], item)\n        } else if (item instanceof Object) {\n          // 3. 判断这个值是否是对象\n          newobj[k] = {};\n          deepCopy(newobj[k], item)\n        } else {\n          // 4. 属于简单数据类型\n          newobj[k] = item;\n        }\n      }\n    }\n    // 使用方法\n    deepCopy(新对象, 原始对象)\n    ")]),n._v("\n  ")])}],s=t("5530"),a=t("2f62"),i={components:{},data:function(){return{}},computed:Object(s["a"])({},Object(a["b"])(["theme"])),created:function(){},mounted:function(){},methods:{}},d=i,r=(t("8cda"),t("2877")),l=Object(r["a"])(d,o,c,!1,null,"16a657a4",null);e["default"]=l.exports},"5a5c":function(n,e,t){},"8cda":function(n,e,t){"use strict";t("5a5c")}}]);