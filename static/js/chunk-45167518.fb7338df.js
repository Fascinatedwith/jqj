(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-45167518"],{9706:function(n,t,a){},d31d:function(n,t,a){"use strict";a.r(t);var o=function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("div",{staticClass:"content",class:{contentTheme:n.theme}},[a("div",{staticClass:"synopsis"},[n._v("简介")]),a("div",{staticClass:"synopsisBox"},[n._v(" echarts图表柱状图3D立体效果 ")]),a("div",{staticClass:"br"}),a("h3",{staticStyle:{margin:"20px 0"}},[n._v("1. npm下载包")]),n._m(0),a("h3",{staticStyle:{margin:"20px 0"}},[n._v("2. 项目中引入")]),n._m(1),a("h3",{staticStyle:{margin:"20px 0"}},[n._v("3. vue页面封装")]),n._m(2)])},s=[function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("pre",{staticClass:"pre"},[n._v("      "),a("code",{staticClass:"code"},[n._v("\n        npm install echarts\n      ")]),n._v("\n    ")])},function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("pre",{staticClass:"pre"},[n._v("      "),a("code",{staticClass:"code"},[n._v("\n        import * as echarts from 'echarts';\n      ")]),n._v("\n    ")])},function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("pre",{staticClass:"pre"},[n._v("      "),a("code",{staticClass:"code"},[n._v("\n        "),a("code",[n._v("<")]),n._v("template>\n          "),a("code",[n._v("<")]),n._v('div ref="pie3d" style="width: 100%; height: 100%; z-index: 9" />\n        '),a("code",[n._v("<")]),n._v("/template>\n        "),a("code",[n._v("<")]),n._v("script>\n        import { ref, onMounted } from 'vue'\n        import * as echarts from 'echarts'\n        const chart = ref(null)\n        onMounted(() => {\n          // drawShape()\n          create()\n        })\n        // 普通3D柱状图    drawShape()\n        function drawShape() {\n          const leftShape = echarts.graphic.extendShape({\n            buildPath(ctx, shape) {\n              const { topBasicsYAxis, bottomYAxis, basicsXAxis } = shape\n              // 侧面宽度\n              const WIDTH = 15\n              // 斜角高度\n              const OBLIQUE_ANGLE_HEIGHT = 3.6\n\n              const p1 = [basicsXAxis - WIDTH, topBasicsYAxis - OBLIQUE_ANGLE_HEIGHT]\n              const p2 = [basicsXAxis - WIDTH, bottomYAxis]\n              const p3 = [basicsXAxis, bottomYAxis]\n              const p4 = [basicsXAxis, topBasicsYAxis]\n\n              ctx.moveTo(p1[0], p1[1])\n              ctx.lineTo(p2[0], p2[1])\n              ctx.lineTo(p3[0], p3[1])\n              ctx.lineTo(p4[0], p4[1])\n            }\n          })\n          const rightShape = echarts.graphic.extendShape({\n            buildPath(ctx, shape) {\n              const { topBasicsYAxis, bottomYAxis, basicsXAxis } = shape\n              // 侧面宽度\n              const WIDTH = 15\n              // 斜角高度\n              const OBLIQUE_ANGLE_HEIGHT = 3.6\n\n              const p1 = [basicsXAxis, topBasicsYAxis]\n              const p2 = [basicsXAxis, bottomYAxis]\n              const p3 = [basicsXAxis + WIDTH, bottomYAxis]\n              const p4 = [basicsXAxis + WIDTH, topBasicsYAxis - OBLIQUE_ANGLE_HEIGHT]\n\n              ctx.moveTo(p1[0], p1[1])\n              ctx.lineTo(p2[0], p2[1])\n              ctx.lineTo(p3[0], p3[1])\n              ctx.lineTo(p4[0], p4[1])\n            }\n          })\n          const topShape = echarts.graphic.extendShape({\n            buildPath(ctx, shape) {\n              const { topBasicsYAxis, basicsXAxis } = shape\n              // 侧面宽度\n              const WIDTH = 15\n              // 斜角高度\n              const OBLIQUE_ANGLE_HEIGHT = 3.6\n\n              const p1 = [basicsXAxis, topBasicsYAxis]\n              const p2 = [basicsXAxis + WIDTH, topBasicsYAxis - OBLIQUE_ANGLE_HEIGHT]\n              const p3 = [basicsXAxis, topBasicsYAxis - OBLIQUE_ANGLE_HEIGHT * 2]\n              const p4 = [basicsXAxis - WIDTH, topBasicsYAxis - OBLIQUE_ANGLE_HEIGHT]\n\n              ctx.moveTo(p1[0], p1[1])\n              ctx.lineTo(p2[0], p2[1])\n              ctx.lineTo(p3[0], p3[1])\n              ctx.lineTo(p4[0], p4[1])\n            }\n          })\n\n          echarts.graphic.registerShape('leftShape', leftShape)\n          echarts.graphic.registerShape('rightShape', rightShape)\n          echarts.graphic.registerShape('topShape', topShape)\n          initChart()\n        }\n        function initChart() {\n          chart.value = echarts.init(document.getElementById('pie3d'))\n          const options = {\n            xAxis: {\n              type: 'category',\n              data: ['苹果', '梨子', '香蕉'],\n              axisLabel: {\n                color: '#fff'\n              }\n            },\n\n            yAxis: {\n              type: 'value',\n              max: 200,\n              axisLabel: {\n                color: '#fff'\n              },\n              splitLine: {\n                lineStyle: {\n                  color: '#222'\n                }\n              }\n            },\n            tooltip: {\n              trigger: 'axis'\n            },\n            series: [\n              {\n                type: 'custom',\n                data: [100, 50, 20],\n                barWidth: 30,\n                renderItem(params, api) {\n                  // 基础坐标\n                  const basicsCoord = api.coord([api.value(0), api.value(1)])\n                  // 顶部基础 y 轴\n                  const topBasicsYAxis = basicsCoord[1]\n                  // 基础 x 轴\n                  const basicsXAxis = basicsCoord[0]\n                  // 底部 y 轴\n                  const bottomYAxis = api.coord([api.value(0), 0])[1]\n                  return {\n                    type: 'group',\n                    children: [\n                      {\n                        type: 'leftShape',\n                        shape: {\n                          topBasicsYAxis,\n                          basicsXAxis,\n                          bottomYAxis\n                        },\n                        style: {\n                          fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                            {\n                              offset: 0,\n                              color: 'rgb(0, 192, 238,0.8)'\n                            },\n\n                            {\n                              offset: 0.8,\n                              color: 'rgb(0, 194, 239,0.2)'\n                            },\n                            {\n                              offset: 1,\n                              color: 'rgb(0, 194, 239,0)'\n                            }\n                          ]),\n                          emphasis: {\n                            fill: 'yellow' // 鼠标高亮时的填充颜色\n                          }\n                        }\n                      },\n                      {\n                        type: 'rightShape',\n                        shape: {\n                          topBasicsYAxis,\n                          basicsXAxis,\n                          bottomYAxis\n                        },\n                        style: {\n                          fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                            {\n                              offset: 0,\n                              color: '#00CCF5 '\n                            },\n\n                            {\n                              offset: 0.8,\n                              color: 'rgb(4, 88, 115,0.8)'\n                            },\n                            {\n                              offset: 1,\n                              color: 'rgb(4, 88, 115,0.6)'\n                            }\n                          ])\n                        }\n                      },\n                      {\n                        type: 'topShape',\n                        shape: {\n                          topBasicsYAxis,\n                          basicsXAxis,\n                          bottomYAxis\n                        },\n                        style: {\n                          fill: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                            {\n                              offset: 0.3,\n                              color: '#6DF0FF'\n                            },\n                            {\n                              offset: 1,\n                              color: '#6DF0FF'\n                            }\n                          ])\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            ]\n          }\n          options && chart.value.setOption(options)\n        }\n\n        // 堆叠3D柱状图   create()\n        function create() {\n          const chartDom = document.getElementById('pie3d')\n          const myChart = echarts.init(chartDom)\n          const xData = ['国道', '省道', '县道', '乡道', '村道']\n          // 计划数据数组\n          const planData = [328, 1488, 360, 22, 922]\n          // 完成数据数组\n          const completeData = [320, 132, 101, 0, 90]\n\n          const color = [\n            {\n              type: 'linear',\n              x: 0,\n              x2: 1,\n              y: 0,\n              y2: 0,\n              //给菱形上色\n              colorStops: [\n                {\n                  offset: 0,\n                  color: '#54a2d3'\n                },\n                {\n                  offset: 0.5,\n                  color: '#54a2d3'\n                },\n                {\n                  offset: 0.5,\n                  color: '#7ed1e3'\n                },\n                {\n                  offset: 1,\n                  color: '#7ed1e3'\n                }\n              ]\n            },\n            {\n      type: 'linear',\n      x: 0,\n      x2: 1,\n      y: 0,\n      y2: 0,\n      //给菱形上色\n      colorStops: [\n        {\n          offset: 0,\n          color: '#a3a418'\n        },\n        {\n          offset: 0.5,\n          color: '#a3a418'\n        },\n        {\n          offset: 0.5,\n          color: '#cdbf38'\n        },\n        {\n          offset: 1,\n          color: '#cdbf38'\n        }\n      ]\n    }\n  ]\n  const barWidth = 30\n  const constData = []\n  const showData = []\n  const otherData = []\n\n  //计算堆叠数据为多少\n  for (let i = 0; i < planData.length; i++) {\n    planData[i] = Number(planData[i])\n    completeData[i] = Number(completeData[i])\n    otherData[i] = planData[i] - completeData[i]\n    if (planData[i] <= 0) {\n      constData.push(0)\n      showData.push({\n        value: 1,\n        itemStyle: {\n          normal: {\n            borderColor: 'rgba(0,0,0,0)',\n            borderWidth: 2,\n            color: 'rgba(0,0,0,0)'\n          }\n        }\n      })\n    } else {\n      if (completeData[i] == planData[i]) {\n        constData.push({\n          value: 1,\n          itemStyle: {\n            normal: {\n              color: color[1]\n            }\n          }\n        })\n      } else {\n        constData.push(1)\n      }\n      if (completeData[i] > 0) {\n        showData.push({\n          value: planData[i],\n          itemStyle: {\n            normal: {\n              borderColor: '#e9d86c',\n              borderWidth: 2,\n              color: '#e9d86c'\n            }\n          }\n        })\n      } else {\n        showData.push({\n          value: planData[i],\n          itemStyle: {\n            normal: {\n              borderColor: '#89e3ec',\n              borderWidth: 2,\n              color: '#89e3ec'\n            }\n          }\n        })\n      }\n    }\n  }\n\n  const option = {\n    //调整光标移入，展示数据的样式\n    tooltip: {\n      trigger: 'axis',\n      formatter: function (params) {\n        return (\n          params[0].axisValue +\n          '：' +\n          '"),a("br"),n._v("计划：' +\n          planData[params[0].dataIndex] +\n          '"),a("br"),n._v("完成：' +\n          completeData[params[0].dataIndex]\n        )\n      }\n    },\n    //调整图例\n    legend: {\n      data: ['计划', '完成'],\n      show: false\n    },\n    //调整图表距边框的距离\n    grid: {\n      left: '3%',\n      right: '3%',\n      top: '15%',\n      bottom: '5%',\n      containLabel: true\n    },\n    // 调整图像x轴\n    xAxis: {\n      data: xData,\n      axisTick: {\n        show: false\n      },\n      axisLabel: {\n        textStyle: {\n          fontFamily: 'Microsoft YaHei',\n          color: '#fff',\n          fontWeight: '400',\n          fontSize: '14'\n        }\n      }\n    },\n    //调整图像y轴\n    yAxis: {\n      axisTick: {\n        show: false\n      },\n      axisLine: {\n        show: false\n      },\n      axisLabel: {\n        show: false\n      },\n      splitLine: {\n        show: true,\n        lineStyle: {\n          color: '#FFFFFF',\n          width: 1,\n          opacity: 0.11\n        }\n      }\n    },\n    //图像的关键显示部分，此处5个拼接一个堆叠柱子，注意此处的调整\n    series: [\n      {\n        z: 1,\n        name: '计划',\n        type: 'bar',\n        stack: '1',\n        barWidth: barWidth,\n        // stack: \"总量\",\n        color: color[0],\n        data: otherData\n      },\n      {\n        z: 2,\n        name: '完成',\n        type: 'bar',\n        stack: '1',\n        barWidth: barWidth,\n        // stack: \"总量\",\n        color: color[1],\n        data: completeData\n      },\n      //柱形底部\n      {\n        z: 3,\n        name: '项目',\n        type: 'pictorialBar',\n        data: constData,\n        symbol: 'diamond',\n        symbolOffset: ['0%', '50%'],\n        symbolSize: [barWidth, 10],\n        itemStyle: {\n          normal: {\n            color: color[0]\n          }\n        },\n\n        tooltip: {\n          show: false\n        }\n      },\n      //某个柱形的底部\n      {\n        z: 4,\n        name: '项目',\n        type: 'pictorialBar',\n        data: otherData,\n        symbol: 'diamond',\n        symbolPosition: 'end',\n        symbolOffset: ['0%', '-50%'],\n        symbolSize: [barWidth, 10],\n        itemStyle: {\n          normal: {\n            color: color[1]\n          }\n        },\n        tooltip: {\n          show: false\n        }\n      },\n      {\n        z: 5,\n        name: '项目',\n        type: 'pictorialBar',\n        symbolPosition: 'end',\n        data: showData,\n        symbol: 'diamond',\n        symbolOffset: ['0%', '-50%'],\n        symbolSize: [barWidth - 4, (10 * (barWidth - 4)) / barWidth],\n        tooltip: {\n          show: false\n        },\n        itemStyle: {\n          normal: {\n            label: {\n              formatter: '{c}',\n              show: true,\n              position: 'top',\n              textStyle: {\n                fontWeight: 400,\n                fontSize: '13',\n                color: '#F2F7FA',\n                lineHeight: 20\n              }\n            }\n          }\n        }\n      }\n    ]\n  }\n  option && myChart.setOption(option)\n}\n\n"),a("code",[n._v("<")]),n._v("/script>\n      ")]),n._v("\n    ")])}],e=a("5530"),i=a("2f62"),c={components:{},data:function(){return{}},computed:Object(e["a"])({},Object(i["b"])(["theme"])),created:function(){},mounted:function(){},methods:{}},r=c,l=(a("e954"),a("2877")),p=Object(l["a"])(r,o,s,!1,null,"0526bf72",null);t["default"]=p.exports},e954:function(n,t,a){"use strict";a("9706")}}]);